// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/karishma-yadav/Documents/golang/csv-microservice/repositories/csv_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "csv-microservice/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddRecord mocks base method.
func (m *MockRepositoryInterface) AddRecord(record models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecord indicates an expected call of AddRecord.
func (mr *MockRepositoryInterfaceMockRecorder) AddRecord(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockRepositoryInterface)(nil).AddRecord), record)
}

// BulkInsert mocks base method.
func (m *MockRepositoryInterface) BulkInsert(records []models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsert", records)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsert indicates an expected call of BulkInsert.
func (mr *MockRepositoryInterfaceMockRecorder) BulkInsert(records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockRepositoryInterface)(nil).BulkInsert), records)
}

// DeleteRecord mocks base method.
func (m *MockRepositoryInterface) DeleteRecord(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteRecord(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteRecord), ctx, id)
}

// InsertRecord mocks base method.
func (m *MockRepositoryInterface) InsertRecord(ctx context.Context, record interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRecord indicates an expected call of InsertRecord.
func (mr *MockRepositoryInterfaceMockRecorder) InsertRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecord", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertRecord), ctx, record)
}

// QueryRecords mocks base method.
func (m *MockRepositoryInterface) QueryRecords(ctx context.Context, queryParams map[string]interface{}, offset, limit int) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRecords", ctx, queryParams, offset, limit)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRecords indicates an expected call of QueryRecords.
func (mr *MockRepositoryInterfaceMockRecorder) QueryRecords(ctx, queryParams, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRecords", reflect.TypeOf((*MockRepositoryInterface)(nil).QueryRecords), ctx, queryParams, offset, limit)
}
